{
  "openapi": "3.0.1",
  "info": {
    "title": "REST API",
    "description": "A reference to the TextVerified REST APIs. By using our API, you agree to our terms and services.\n\nThe base API uri is: https://www.textverified.com/api\n\nThe general verification workflow is as follows: <ol type='1'><li>Authenticate</li><li>Query for Targets</li><li>Create the verification</li><li>Poll/monitor verification for completion</li></ol>\nThrottling is applied on API requests and you will receive a 503 HTTP error if you are subject to throttling due to excessive requests.",
    "contact": {
      "url": "https://www.textverified.com/contact-us"
    },
    "version": "v1",
    "license": {
      "name": "unlicensed",
      "url": "https://opensource.org/licenses/unlicense"
    }
  },
  "servers": [
    {
      "description": "TextVerified Main Server",
      "url": "https://www.textverified.com/api"
    }
  ],
  "paths": {
    "/Api/SimpleAuthentication": {
      "post": {
        "security": [
          {
            "simple-api-access-token": []
          }
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Simple Access Token Authentication",
        "description": "Generates a bearer token from your simple access token.\r\n            \r\n    Issue a HTTP POST request with a 'X-SIMPLE-API-ACCESS-TOKEN' header that has your Simple Access Token (starts with '1_') as the value.\r\n    //EXAMPLE:      X-SIMPLE-API-ACCESS-TOKEN:1_your_simple_access_token\r\n    \r\nUpon successful authentication, a bearer token will be returned. This token must be presented in future requests in the form of a Authorization: Bearer header.\r\nThis token WILL EXPIRE, after which a new bearer token will need to be obtained by reissuing a request to this endpoint.        \r\n            \r\n    All future requests must use Bearer Authorization where the header is:\r\n            \r\n    Authorization: Bearer {Bearer Token}\r\n    //EXAMPLE:    Authorization: Bearer eyxCbGciOiJIUzI1Nis...5xywLoYVqTcXDexbC8\r\n            \r\nYou will receive a HTTP 429 error if accessing this endpoint too frequently. The bearer token should be cached and reused until close to it's expiration.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/Api/Authentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "JWT Bearer Token Authentication",
        "description": "Generates a bearer token from the client key and client secret using Basic Authorization with your Api Client Key and Api Client Secret.\r\n            \r\n    Your client key and client secret must be presented using Basic Authorization where the header is:\r\n            \r\n    Authorization: Basic {Base-64 encode of:[Your Api Client Key]:[Your Api Client Secret]}\r\n    //EXAMPLE:    Authorization: Basic ZXdocVVHWWNM....IZjBKdjRrMUlHRFpNWVRMZG\r\n    \r\n    Additional example:\r\n    \r\n    Your Api Client Key =>                          ABC\r\n    Your Api Client Secret =>                       123\r\n    Base-64 encoding of ABC:123 =>                  QUJDOjEyMw==\r\n    Your full authorization header value =>         Basic QUJDOjEyMw==\r\n    \r\n            \r\nSee https://tools.ietf.org/html/rfc7617 for more details on Basic Authorization. This token WILL EXPIRE, after which a new bearer token will need to be obtained.\r\nThis token must be presented in future requests in the form of a Authorization: Bearer header.\r\n            \r\n    All future requests must use Bearer Authorization where the header is:\r\n            \r\n    Authorization: Bearer {Bearer Token}\r\n    //EXAMPLE:    Authorization: Bearer eyxCbGciOiJIUzI1Nis...5xywLoYVqTcXDexbC8\r\n            \r\nOnce the bearer token expires, you will have to use Basic Authorization again to obtain a new bearer token. See https://tools.ietf.org/html/rfc6750 for more details on Bearer Tokens.\r\nYou will receive a HTTP 429 error if accessing this endpoint too frequently. The bearer token should be cached and reused until close to it's expiration.             \r\nYou will receive a HTTP 400 error if the authorization header is malformed.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Authorization header does not conform to RFC6750"
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/api/Preferences": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "Get preferences",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preferences"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/preferences/area-codes": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "Area code filters",
        "description": "Returns the list of accepted area code filters you can select from.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaCodeFilters"
                }
              }
            }
          }
        }
      }
    },
    "/api/preferences": {
      "post": {
        "tags": [
          "Preferences"
        ],
        "summary": "Update preferences",
        "description": "Updates your account's verification preferences. All fields must be provided for the 'preferences' object.  The /api/preferences/area-codes endpoint provides the accepted area code filters. A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preferences"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Preferences"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Preferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/targets": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get All Targets",
        "description": "Returns an array of targets. A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "operationId": "GetAllTargets",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTargetViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Targets/{id}": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get Target",
        "description": "Returns a single target. A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTargetViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Details",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Verifications/{id}": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "Verification Details",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint. To configure webhooks for a verification received event, please go to the API Configuration page.",
        "operationId": "GetVerificationDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/Verifications/Pending": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "Pending Verifications",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PendingVerificationsViewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/Verifications": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Create Verification",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint. Must have a content-type of\r\n            \r\n    application/json",
        "requestBody": {
          "description": "Json formatted parameter(s) for creating verifications.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequestViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Create failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Insufficient credits"
          },
          "429": {
            "description": "Too many pending verifications. Complete the pending verifications before creating additional ones."
          },
          "503": {
            "description": "Service is temporarily unavailable."
          }
        }
      }
    },
    "/api/Verifications/{id}/Cancel": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Cancel Verification",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful cancellation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Report failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/Verifications/{id}/Report": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Report Verification",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful report",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Report failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/api/Verifications/{id}/Reuse": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Reuse Verification",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Create failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Insufficient credits"
          },
          "404": {
            "description": "Verification not found"
          },
          "429": {
            "description": "Too many pending verifications. Complete the pending verifications before creating additional ones."
          },
          "503": {
            "description": "Service is temporarily unavailable due to maintenance."
          }
        }
      }
    },
    "/api/Verifications/{id}/Resurrect": {
      "put": {
        "tags": [
          "Verifications"
        ],
        "summary": "Resurrect Verification",
        "description": "A valid bearer token is required to complete this request. Obtained from the api/authentication endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Create failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Insufficient credits"
          },
          "404": {
            "description": "Verification not found"
          },
          "429": {
            "description": "Too many pending verifications. Complete the pending verifications before creating additional ones."
          },
          "503": {
            "description": "Service is temporarily unavailable due to maintenance."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiTargetViewModel": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 33
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "example": "Google"
          },
          "normalizedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "example": "google"
          },
          "cost": {
            "type": "number",
            "format": "double",
            "readOnly": true,
            "example": 1.5
          },
          "status": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "pricingMode": {
            "$ref": "#/components/schemas/Modes"
          }
        },
        "additionalProperties": false
      },
      "AreaCodeFilters": {
        "type": "object",
        "properties": {
          "acceptableAreaCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "These are the area codes that are accepted.",
            "nullable": true,
            "example": [
              "202",
              "240",
              "518"
            ]
          }
        },
        "additionalProperties": false
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "bearer_token": {
            "type": "string",
            "description": "Token to be provided with all api requests in the form of a bearer token authorization header. See https://tools.ietf.org/html/rfc6750 for more details.",
            "nullable": true,
            "example": "eyxCbGciOiJIUzI1Nis...5xywLoYVqTcXDexbC8"
          },
          "expiration": {
            "type": "string",
            "description": "Timestamp, in UTC, after which a new bearer token will have to be obtained or all requests will result in a 401 Unauthorized.",
            "format": "date-time",
            "example": "2018-05-01T15:20:22Z"
          },
          "ticks": {
            "type": "integer",
            "description": "Ticks before the bearer token will expire.",
            "format": "int64",
            "readOnly": true,
            "example": 636607848220000000
          }
        },
        "additionalProperties": false
      },
      "AvailabilityStatus": {
        "enum": [
          "NotAvailable",
          "Available",
          "SurgePricingBlocked",
          "QuotaExceeded"
        ],
        "type": "string",
        "description": "NotAvailable<br/>Available<br/>SurgePricingBlocked<br/>QuotaExceeded"
      },
      "Modes": {
        "enum": [
          "Default",
          "Surge",
          "Free",
          "Premium",
          "Adjusted",
          "Filtered",
          "Discounted"
        ],
        "type": "string",
        "description": "Default<br/>Surge<br/>Free<br/>Premium<br/>Adjusted<br/>Filtered<br/>Discounted"
      },
      "PendingVerificationsViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the verification.",
            "nullable": true,
            "example": "eeb00e5a-67bb-4c36-a49d-88653bbc4a29"
          },
          "target_id": {
            "type": "integer",
            "description": "The verification target id.",
            "format": "int32",
            "example": 33
          }
        },
        "additionalProperties": false
      },
      "Preferences": {
        "type": "object",
        "properties": {
          "blockSurgePricing": {
            "type": "boolean",
            "description": "Determines whether or not surge price blocking is enabled. You will unable to complete verifications if the prices are in surge when this option is on.",
            "example": true
          },
          "areaCodeFilterEnabled": {
            "type": "boolean",
            "description": "Determines whether or not area code filtering is enabled.",
            "example": true
          },
          "areaCodeFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "These are the area code filters that will be applied to your account.",
            "nullable": true,
            "example": [
              "202"
            ]
          }
        },
        "additionalProperties": false
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Current username.",
            "nullable": true,
            "example": "user@textverified.com"
          },
          "credit_balance": {
            "type": "number",
            "description": "Current credit balance.",
            "format": "double",
            "example": 33.5
          }
        },
        "additionalProperties": false
      },
      "VerificationRequestViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the target. Obtained from the api/target endpoint when querying for target availability.",
            "format": "int32",
            "nullable": true,
            "example": 31
          },
          "areaCode": {
            "type": "string",
            "description": "Apply an area code filter to the request. A specific area code is not guaranteed to be available. This field is optional.",
            "nullable": true,
            "example": "650"
          },
          "requestedTimeAllotment": {
            "type": "string",
            "description": "Not currently implemented. Do not include this field.",
            "format": "time-span",
            "nullable": true,
            "example": "Not implemented"
          }
        },
        "additionalProperties": false
      },
      "VerificationViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the verification.",
            "nullable": true,
            "example": "eeb00e5a-67bb-4c36-a49d-88653bbc4a29"
          },
          "cost": {
            "type": "number",
            "description": "Cost in credits for the verification.",
            "format": "double",
            "example": 1.5
          },
          "target_name": {
            "type": "string",
            "description": "The verification target name.",
            "nullable": true,
            "example": "Google"
          },
          "number": {
            "type": "string",
            "description": "Number assigned to the verification. Provide this to the target service (e.g., Google) you are trying to verify.",
            "nullable": true,
            "example": "3084412123"
          },
          "sender_number": {
            "type": "string",
            "description": "The number from which the SMS was sent.",
            "nullable": true,
            "example": "9684235114"
          },
          "time_remaining": {
            "type": "string",
            "description": "Time remaining before the verification transitions to the \"Timed Out\" state.",
            "format": "time-span",
            "nullable": true,
            "example": "00:04:21"
          },
          "reuse_window": {
            "type": "string",
            "description": "Time remaining before the verification can no longer be reused (use the same number again for the same service). Only verifications in the \"Completed\" state and within the reuse time window can be reused.",
            "format": "time-span",
            "nullable": true,
            "example": "00:00:38"
          },
          "status": {
            "type": "string",
            "description": "State of the verification.\r\n            \r\n    {\r\n        Pending     // Waiting for SMS\r\n        Completed   // SMS received\r\n        Timed Out   // Verification expired\r\n        Reported    // Verification was reported by user\r\n        Cancelled   // Verification was cancelled by user or system\r\n    }",
            "nullable": true,
            "example": "Completed"
          },
          "sms": {
            "type": "string",
            "description": "Contents of the SMS for the verification.",
            "nullable": true,
            "example": "G-482791 is your Google verification code."
          },
          "code": {
            "type": "string",
            "description": "Parsed verification code from the SMS.",
            "nullable": true,
            "example": "482791"
          },
          "verification_uri": {
            "type": "string",
            "description": "Uri for the verification resource.",
            "nullable": true,
            "readOnly": true,
            "example": "/verifications/eeb00e5a-67bb-4c36-a49d-88653bbc4a29"
          },
          "cancel_uri": {
            "type": "string",
            "description": "Uri to cancel the verification. Only a verification in the \"Pending\" state can be cancelled.",
            "nullable": true,
            "readOnly": true,
            "example": "/verifications/eeb00e5a-67bb-4c36-a49d-88653bbc4a29/cancel"
          },
          "report_uri": {
            "type": "string",
            "description": "Uri to report the verification. Only a verification in the \"Pending\" state can be reported.",
            "nullable": true,
            "readOnly": true,
            "example": "/verifications/eeb00e5a-67bb-4c36-a49d-88653bbc4a29/report"
          },
          "reuse_uri": {
            "type": "string",
            "description": "Uri to reuse the verification with the same number and for the same service. Only a verification in the \"Completed\" state and within the reuse window can be reused.",
            "nullable": true,
            "readOnly": true,
            "example": "/verifications/eeb00e5a-67bb-4c36-a49d-88653bbc4a29/reuse"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "simple-api-access-token": {
        "type": "apiKey",
        "name": "X-SIMPLE-API-ACCESS-TOKEN",
        "in": "header"
      },
      "bearer_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer Authentication"
      }
    }
  }
}